{"ast":null,"code":"var _jsxFileName = \"C:\\\\Apps\\\\swine-fever-website\\\\swine-fever-website-frontend\\\\swine-fever-website-frontend\\\\src\\\\components\\\\Sidebar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport CitySearch from './CitySearch.js';\n\n/**\r\n * Sidebar component for all user operations about submitting and viewing information about cases.\r\n * It fetches and displays the count of positive and negative cases from the backend.\r\n * It displays statistics about reported cases. \r\n *\r\n * @param {Object} props - React props\r\n * @param {Function} props.setCurrentView - Function to set the current view in the app\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = ({\n  onSignInClick,\n  isSignedIn,\n  onSignUpClick,\n  username,\n  organization\n}) => {\n  _s();\n  const navigate = useNavigate(); // Use the navigate hook for routing\n\n  // State variables for managing counts, user info, image handling, and loading states\n  const [positiveCount, setPositiveCount] = useState(0); // State for positive case count\n  const [negativeCount, setNegativeCount] = useState(0); // State for negative case count\n  const [selectedFile, setSelectedFile] = useState(null); // State for the selected image file\n  const [imagePreview, setImagePreview] = useState(null); // State for image preview\n  const [loading, setLoading] = useState(false); // State for loading status during API calls\n  const [prediction, setPrediction] = useState(null); // State for prediction result\n  const [probability, setProbability] = useState(null); // State for prediction probability\n  const [error, setError] = useState(null); // State for error messages\n  const [selectedCity, setSelectedCity] = useState(null); // State for the selected city\n\n  /**\r\n   * Handles changes in the file input and sets the selected image.\r\n   * Displays a preview of the selected image.\r\n   *\r\n   * @param {Event} event - The file input change event\r\n   */\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    setSelectedFile(file);\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  /**\r\n   * Handles the prediction request when the user submits an image.\r\n   * Validates user input and sends the image to the backend for analysis.\r\n   */\n  const handlePredict = async () => {\n    const formData = new FormData();\n    setPrediction(null); // Reset prediction state\n\n    // Validate selected file\n    if (!selectedFile) {\n      alert(\"Please select an image first.\");\n      return;\n    } else {\n      formData.append('image', selectedFile); // Append the selected image to the form data\n    }\n\n    // Validate user sign-in\n    if (!isSignedIn) {\n      alert('Please sign in before submitting.');\n      return;\n    } else {\n      formData.append('user', username);\n      formData.append('org', organization);\n    }\n\n    // Include the latitude and longitude from your selected location\n    if (selectedCity) {\n      formData.append('lat', selectedCity.lat);\n      formData.append('lng', selectedCity.lng);\n    } else {\n      alert(\"Please select a city first.\");\n      return;\n    }\n    setLoading(true); // Set loading state to true\n    setError(null); // Clear any previous errors\n\n    try {\n      const response = await fetch('https://swine-fever-backend.azurewebsites.net/predict', {\n        method: 'POST',\n        body: formData // Send the form data in the request body\n      });\n      // Handle response\n      if (!response.ok) {\n        throw new Error('Error in prediction request');\n      }\n      const result = await response.json(); // Parse JSON response\n      const prediction = result.tagName; // Get the prediction from the response\n      const probability = result.probability; // Get the prediction probability\n\n      if (prediction === 'non-image') {\n        throw new Error('No swine fever test detected. Ensure your swine fever test is the subject of your image.');\n      }\n      setPrediction(prediction); // Update state with the prediction result\n      setProbability(probability); // Update state with the prediction probability\n      console.log(\"Prediction Result:\", result); // Log the prediction result for debugging\n    } catch (err) {\n      setError(err.message); // Handle errors\n      console.error('Prediction Error:', err);\n    } finally {\n      setLoading(false); // Reset loading state\n    }\n  };\n\n  /**\r\n   * Handles city selection and updates the selected city state.\r\n   *\r\n   * @param {Object} cityName - The selected city object\r\n   */\n  const handleCitySearch = async cityName => {\n    try {\n      if (cityName) {\n        setSelectedCity({\n          name: cityName.name,\n          lat: cityName.lat,\n          lng: cityName.lng\n        });\n      } else {\n        throw new Error(\"City not found\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching location data:\", err);\n      setError(\"Could not find location. Please try again.\");\n    }\n  };\n\n  /**\r\n   * Handles the event when a city is selected from the search.\r\n   *\r\n   * @param {Object} city - The selected city object\r\n   */\n  const handleCitySelected = city => {\n    handleCitySearch(city); // Fetch location when a city is selected\n  };\n\n  /**\r\n   * Removes the image preview and resets the selected file.\r\n   */\n  const removePreview = () => {\n    setImagePreview(null); // Clear the image preview\n    setSelectedFile(null); // Reset the selected file\n    setPrediction(null);\n  };\n\n  /**\r\n   * Fetches the counts of positive and negative cases from the API.\r\n   * Updates the state with the fetched counts.\r\n   */\n  const fetchCounts = async () => {\n    try {\n      // Fetch the count of positive cases\n      const positiveResponse = await fetch('https://swine-fever-backend.azurewebsites.net/api/positive-count');\n      const positiveData = await positiveResponse.json(); // Parse the JSON response\n      setPositiveCount(positiveData.positiveCount); // Update the state with the positive count\n\n      // Fetch the count of negative cases\n      const negativeResponse = await fetch('https://swine-fever-backend.azurewebsites.net/api/negative-count');\n      if (!negativeResponse.ok) {\n        // Check if the response is not OK\n        const errorText = await negativeResponse.text();\n        throw new Error(`Failed to fetch negative cases count: ${errorText}`);\n      }\n      const negativeData = await negativeResponse.json(); // Parse the JSON response\n      setNegativeCount(negativeData.negativeCount); // Update the state with the negative count\n    } catch (error) {\n      console.error('Error fetching counts:', error);\n    }\n  };\n\n  // useEffect hook to fetch counts when the component mounts\n  useEffect(() => {\n    fetchCounts(); // Call fetchCounts to get the initial counts\n  }, []); // Empty dependency array ensures this runs only on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-button\",\n        onClick: () => navigate('/gallery'),\n        children: \"View Image Gallery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"nav-button\",\n        onClick: () => navigate('/'),\n        children: \"View Map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: '33px'\n      },\n      className: \"button\",\n      onClick: onSignUpClick,\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: onSignInClick,\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CitySearch, {\n      onCitySelected: handleCitySelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      style: {\n        marginBottom: '45px'\n      },\n      className: \"file-input\",\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), imagePreview && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imagePreview,\n        alt: \"Selected\",\n        style: {\n          width: 'auto',\n          height: '300px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: handlePredict,\n      disabled: loading && isSignedIn,\n      children: loading ? 'Loading...' : 'Submit for Analysis'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '15px'\n      },\n      className: \"prediction-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Result: \", prediction]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Probability: \", probability]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: removePreview,\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        marginTop: '45px',\n        marginBottom: '-5px'\n      },\n      className: \"button\",\n      onClick: fetchCounts,\n      children: \"Refresh Statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Number of Reported Positive Cases: \", positiveCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Number of Reported Negative Cases: \", negativeCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(Sidebar, \"zaAezt0+VwTlPBoXad0aEcXe2l4=\", false, function () {\n  return [useNavigate];\n});\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","CitySearch","jsxDEV","_jsxDEV","Sidebar","onSignInClick","isSignedIn","onSignUpClick","username","organization","_s","navigate","positiveCount","setPositiveCount","negativeCount","setNegativeCount","selectedFile","setSelectedFile","imagePreview","setImagePreview","loading","setLoading","prediction","setPrediction","probability","setProbability","error","setError","selectedCity","setSelectedCity","handleFileChange","event","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","handlePredict","formData","FormData","alert","append","lat","lng","response","fetch","method","body","ok","Error","json","tagName","console","log","err","message","handleCitySearch","cityName","name","handleCitySelected","city","removePreview","fetchCounts","positiveResponse","positiveData","negativeResponse","errorText","text","negativeData","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","onCitySelected","marginBottom","type","accept","onChange","src","alt","width","height","disabled","paddingBottom","_c","$RefreshReg$"],"sources":["C:/Apps/swine-fever-website/swine-fever-website-frontend/swine-fever-website-frontend/src/components/Sidebar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CitySearch from './CitySearch.js';\r\n\r\n/**\r\n * Sidebar component for all user operations about submitting and viewing information about cases.\r\n * It fetches and displays the count of positive and negative cases from the backend.\r\n * It displays statistics about reported cases. \r\n *\r\n * @param {Object} props - React props\r\n * @param {Function} props.setCurrentView - Function to set the current view in the app\r\n */\r\nconst Sidebar = ({ onSignInClick, isSignedIn, onSignUpClick, username, organization }) => {\r\n  const navigate = useNavigate(); // Use the navigate hook for routing\r\n\r\n  // State variables for managing counts, user info, image handling, and loading states\r\n  const [positiveCount, setPositiveCount] = useState(0); // State for positive case count\r\n  const [negativeCount, setNegativeCount] = useState(0); // State for negative case count\r\n  const [selectedFile, setSelectedFile] = useState(null); // State for the selected image file\r\n  const [imagePreview, setImagePreview] = useState(null); // State for image preview\r\n  const [loading, setLoading] = useState(false); // State for loading status during API calls\r\n  const [prediction, setPrediction] = useState(null); // State for prediction result\r\n  const [probability, setProbability] = useState(null); // State for prediction probability\r\n  const [error, setError] = useState(null); // State for error messages\r\n  const [selectedCity, setSelectedCity] = useState(null); // State for the selected city\r\n\r\n  /**\r\n   * Handles changes in the file input and sets the selected image.\r\n   * Displays a preview of the selected image.\r\n   *\r\n   * @param {Event} event - The file input change event\r\n   */\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setImagePreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the prediction request when the user submits an image.\r\n   * Validates user input and sends the image to the backend for analysis.\r\n   */\r\n  const handlePredict = async () => {\r\n    const formData = new FormData();\r\n    setPrediction(null); // Reset prediction state\r\n\r\n    // Validate selected file\r\n    if (!selectedFile) {\r\n      alert(\"Please select an image first.\");\r\n      return;\r\n    }\r\n    else{\r\n      formData.append('image', selectedFile); // Append the selected image to the form data\r\n    }\r\n\r\n    // Validate user sign-in\r\n    if (!isSignedIn) {\r\n      alert('Please sign in before submitting.');\r\n      return;\r\n    }\r\n    else{\r\n      formData.append('user', username);\r\n      formData.append('org', organization);\r\n    }\r\n\r\n    // Include the latitude and longitude from your selected location\r\n    if (selectedCity) {\r\n      formData.append('lat', selectedCity.lat);\r\n      formData.append('lng', selectedCity.lng); \r\n    } else {\r\n        alert(\"Please select a city first.\");\r\n        return;\r\n    }\r\n\r\n    setLoading(true); // Set loading state to true\r\n    setError(null); // Clear any previous errors\r\n\r\n    try {\r\n      const response = await fetch('https://swine-fever-backend.azurewebsites.net/predict', {\r\n        method: 'POST',\r\n        body: formData, // Send the form data in the request body\r\n      });\r\n      // Handle response\r\n      if (!response.ok) {\r\n        throw new Error('Error in prediction request');\r\n      }\r\n\r\n      const result = await response.json(); // Parse JSON response\r\n      const prediction = result.tagName; // Get the prediction from the response\r\n      const probability = result.probability; // Get the prediction probability\r\n\r\n      if(prediction === 'non-image'){\r\n        throw new Error('No swine fever test detected. Ensure your swine fever test is the subject of your image.');\r\n      }\r\n\r\n      setPrediction(prediction); // Update state with the prediction result\r\n      setProbability(probability); // Update state with the prediction probability\r\n      console.log(\"Prediction Result:\", result); // Log the prediction result for debugging\r\n\r\n    } catch (err) {\r\n      setError(err.message); // Handle errors\r\n      console.error('Prediction Error:', err);\r\n\r\n    } finally {\r\n      setLoading(false); // Reset loading state\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles city selection and updates the selected city state.\r\n   *\r\n   * @param {Object} cityName - The selected city object\r\n   */\r\n  const handleCitySearch = async (cityName) => {\r\n    try {      \r\n      if (cityName) {\r\n        setSelectedCity({\r\n          name: cityName.name,\r\n          lat: cityName.lat,\r\n          lng: cityName.lng,\r\n        });\r\n\r\n      } else {\r\n        throw new Error(\"City not found\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching location data:\", err);\r\n      setError(\"Could not find location. Please try again.\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handles the event when a city is selected from the search.\r\n   *\r\n   * @param {Object} city - The selected city object\r\n   */\r\n  const handleCitySelected = (city) => {\r\n    handleCitySearch(city); // Fetch location when a city is selected\r\n  };\r\n  \r\n  /**\r\n   * Removes the image preview and resets the selected file.\r\n   */\r\n  const removePreview = () => {\r\n    setImagePreview(null); // Clear the image preview\r\n    setSelectedFile(null); // Reset the selected file\r\n    setPrediction(null);\r\n  };\r\n\r\n  /**\r\n   * Fetches the counts of positive and negative cases from the API.\r\n   * Updates the state with the fetched counts.\r\n   */\r\n  const fetchCounts = async () => {\r\n    try {\r\n      // Fetch the count of positive cases\r\n      const positiveResponse = await fetch('https://swine-fever-backend.azurewebsites.net/api/positive-count');\r\n      const positiveData = await positiveResponse.json(); // Parse the JSON response\r\n      setPositiveCount(positiveData.positiveCount); // Update the state with the positive count\r\n  \r\n      // Fetch the count of negative cases\r\n      const negativeResponse = await fetch('https://swine-fever-backend.azurewebsites.net/api/negative-count');\r\n      if (!negativeResponse.ok) { // Check if the response is not OK\r\n        const errorText = await negativeResponse.text();\r\n        throw new Error(`Failed to fetch negative cases count: ${errorText}`);\r\n      }\r\n      const negativeData = await negativeResponse.json(); // Parse the JSON response\r\n      setNegativeCount(negativeData.negativeCount); // Update the state with the negative count\r\n    } catch (error) {\r\n      console.error('Error fetching counts:', error);\r\n    }\r\n  };\r\n\r\n  // useEffect hook to fetch counts when the component mounts\r\n  useEffect(() => {\r\n    fetchCounts(); // Call fetchCounts to get the initial counts\r\n  }, []); // Empty dependency array ensures this runs only on mount\r\n\r\n  return (\r\n    <div className=\"sidebar\"> {/* Sidebar container */}\r\n      <div className='nav-button-container'>\r\n        <button className=\"nav-button\" onClick={() => navigate('/gallery')}>\r\n          View Image Gallery \r\n        </button>\r\n        <button className=\"nav-button\" onClick={() => navigate('/')}>\r\n          View Map\r\n        </button>\r\n      </div>\r\n      <button style={{marginTop: '33px'}} className=\"button\" onClick={onSignUpClick}>Sign Up</button>\r\n      <button className=\"button\" onClick={onSignInClick}>Sign In</button>\r\n\r\n      {/* CitySearch Component */}\r\n      <CitySearch onCitySelected={handleCitySelected} />\r\n\r\n      {/* File input for image selection */}\r\n      <input style={{marginBottom: '45px'}}\r\n        className=\"file-input\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={handleFileChange}\r\n      />\r\n      {/* Preview of the selected image */}\r\n      {imagePreview && (\r\n        <div className=\"image-preview\">\r\n          <img src={imagePreview} alt=\"Selected\" style={{ width: 'auto', height: '300px' }} />\r\n        </div>\r\n      )}\r\n      {/* Submit for Analysis Button */}\r\n      <button className=\"button\" onClick={handlePredict} disabled={loading && isSignedIn}>\r\n        {loading ? 'Loading...' : 'Submit for Analysis'}\r\n      </button>\r\n      {prediction && (\r\n        <div style={{paddingBottom: '15px'}} className=\"prediction-result\">\r\n          <h3>Prediction Result:</h3>\r\n          <p>Result: {prediction}</p> {/* Display prediction result */}\r\n          <p>Probability: {probability}</p>\r\n        </div>\r\n      )}\r\n      <button className=\"button\" onClick={removePreview}>\r\n        Cancel\r\n      </button>\r\n      <button style={{marginTop: '45px', marginBottom: '-5px'}} className=\"button\" onClick={fetchCounts}>Refresh Statistics</button>\r\n      <div>\r\n        <h3>Number of Reported Positive Cases: {positiveCount}</h3>\r\n        <h3>Number of Reported Negative Cases: {negativeCount}</h3>\r\n      </div>\r\n      {error && <p className=\"error-message\">{error}</p>} {/* Display error message */}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}