{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import CitySearch from'./CitySearch.js';/**\r\n * Sidebar component for displaying statistics about reported cases.\r\n * It fetches and displays the count of positive and negative cases from the backend.\r\n */import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const Sidebar=_ref=>{let{setCurrentView}=_ref;const navigate=useNavigate();// Use the navigate hook for routing\nconst[positiveCount,setPositiveCount]=useState(0);const[negativeCount,setNegativeCount]=useState(0);const[selectedFile,setSelectedFile]=useState(null);const[imagePreview,setImagePreview]=useState(null);const[loading,setLoading]=useState(false);const[prediction,setPrediction]=useState(null);const[probability,setProbability]=useState(null);const[error,setError]=useState(null);const[selectedCity,setSelectedCity]=useState(null);const[user,setUser]=useState(false);const[username,setUsername]=useState(null);const[organization,setOrganization]=useState(null);const[usernameInput,setUsernameInput]=useState('');const[organizationInput,setOrganizationInput]=useState('');const handleFileChange=event=>{const file=event.target.files[0];setSelectedFile(file);if(file){const reader=new FileReader();reader.onloadend=()=>{setImagePreview(reader.result);};reader.readAsDataURL(file);}};const handlePredict=async()=>{const formData=new FormData();if(!selectedFile){alert(\"Please select an image first.\");return;}else{formData.append('image',selectedFile);// 'image' should match the key used in multer\n}if(!user){alert('Please sign in before submitting.');return;}else{formData.append('user',username);formData.append('org',organization);}// Include the latitude and longitude from your selected location\nif(selectedCity){formData.append('lat',selectedCity.lat);formData.append('lng',selectedCity.lng);}else{alert(\"Please select a city first.\");return;}setLoading(true);setError(null);try{const response=await fetch('http://localhost:3000/predict',{method:'POST',body:formData});if(!response.ok){throw new Error('Error in prediction request');}const result=await response.json();const prediction=result.tagName;const probability=result.probability;setPrediction(prediction);// Update state with the prediction result\nsetProbability(probability);console.log(\"Prediction Result:\",result);// Log the prediction result for debugging\n}catch(err){setError(err.message);// Handle errors\nconsole.error('Prediction Error:',err);}finally{setLoading(false);// Reset loading state\n}};const removePreview=()=>{setImagePreview(null);setSelectedFile(null);};/**\r\n   * Function to fetch the counts of positive and negative cases from the API.\r\n   * It updates the state with the fetched counts.\r\n   */const fetchCounts=async()=>{try{// Fetch the count of positive cases\nconst positiveResponse=await fetch('http://localhost:3000/api/positive-count');const positiveData=await positiveResponse.json();// Parse the JSON response\nsetPositiveCount(positiveData.positiveCount);// Update the state with the positive count\n// Fetch the count of negative cases\nconst negativeResponse=await fetch('http://localhost:3000/api/negative-count');if(!negativeResponse.ok){// Check if the response is not OK\nconst errorText=await negativeResponse.text();throw new Error(`Failed to fetch negative cases count: ${errorText}`);}const negativeData=await negativeResponse.json();// Parse the JSON response\nsetNegativeCount(negativeData.negativeCount);// Update the state with the negative count\n}catch(error){console.error('Error fetching counts:',error);}};const handleCitySearch=async cityName=>{try{if(cityName){setSelectedCity({name:cityName.name,lat:cityName.lat,lng:cityName.lng});}else{throw new Error(\"City not found\");}}catch(err){console.error(\"Error fetching location data:\",err);setError(\"Could not find location. Please try again.\");}};const handleCitySelected=city=>{handleCitySearch(city);// Fetch location when a city is selected\n};const handleSignIn=async()=>{setUsername(usernameInput);setOrganization(organizationInput);const formData=new FormData();formData.append('username',usernameInput);try{// Send a request to check if the username exists\nconst response=await fetch('http://localhost:3000/api/check-username',{method:'POST',body:formData});if(!response.ok){throw new Error('Network response was not ok');}// Now handle the response data correctly\nif(usernameInput===''||organizationInput===''){setError('Please fill in your Username/Organization');}else{// Username is available, proceed to set values\nsetUsername(usernameInput);setOrganization(organizationInput);// Clear input fields after successful sign-in\nsetUsernameInput('');setOrganizationInput('');setUser(true);}}catch(error){console.error('Error checking username:',error);setError('An error occurred while checking the username.');}finally{setLoading(false);}};// useEffect hook to fetch counts when the component mounts\nuseEffect(()=>{fetchCounts();// Call fetchCounts to get the initial counts\n},[]);// Empty dependency array ensures this runs only on mount\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"sidebar\",children:[\" \",/*#__PURE__*/_jsxs(\"div\",{style:{paddingBottom:'15px'},className:\"sign-in\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Username: \",username]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:usernameInput,onChange:e=>setUsernameInput(e.target.value),placeholder:\"Enter your username\",required:true}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Organization: \",organization]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:organizationInput,onChange:e=>setOrganizationInput(e.target.value),placeholder:\"Enter your organization\",required:true})]}),/*#__PURE__*/_jsx(\"button\",{style:{marginBottom:'45px'},className:\"button\",onClick:handleSignIn,children:\"Sign In\"}),/*#__PURE__*/_jsx(\"button\",{style:{marginBottom:'-5px'},className:\"button\",onClick:fetchCounts,children:\"Refresh Statistics\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Number of Reported Positive Cases: \",positiveCount]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Number of Reported Negative Cases: \",negativeCount]})]}),/*#__PURE__*/_jsx(CitySearch,{onCitySelected:handleCitySelected}),/*#__PURE__*/_jsx(\"input\",{className:\"file-input\",type:\"file\",accept:\"image/*\",onChange:handleFileChange}),imagePreview&&/*#__PURE__*/_jsx(\"div\",{className:\"image-preview\",children:/*#__PURE__*/_jsx(\"img\",{src:imagePreview,alt:\"Selected\",style:{width:'auto',height:'300px'}})}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:handlePredict,disabled:loading&&user,children:loading?'Loading...':'Submit for Analysis'}),prediction&&/*#__PURE__*/_jsxs(\"div\",{style:{paddingBottom:'15px'},className:\"prediction-result\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Prediction Result:\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Result: \",prediction]}),\" \",/*#__PURE__*/_jsxs(\"p\",{children:[\"Probability: \",probability]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:removePreview,children:\"Cancel\"}),/*#__PURE__*/_jsx(\"button\",{style:{marginTop:'45px'},className:\"button\",onClick:()=>navigate('/gallery'),children:\"View Image Gallery\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:()=>navigate('/'),children:\"Back to Home\"}),error&&/*#__PURE__*/_jsx(\"p\",{className:\"error-message\",children:error}),\" \"]});};export default Sidebar;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","CitySearch","jsxs","_jsxs","jsx","_jsx","Sidebar","_ref","setCurrentView","navigate","positiveCount","setPositiveCount","negativeCount","setNegativeCount","selectedFile","setSelectedFile","imagePreview","setImagePreview","loading","setLoading","prediction","setPrediction","probability","setProbability","error","setError","selectedCity","setSelectedCity","user","setUser","username","setUsername","organization","setOrganization","usernameInput","setUsernameInput","organizationInput","setOrganizationInput","handleFileChange","event","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","handlePredict","formData","FormData","alert","append","lat","lng","response","fetch","method","body","ok","Error","json","tagName","console","log","err","message","removePreview","fetchCounts","positiveResponse","positiveData","negativeResponse","errorText","text","negativeData","handleCitySearch","cityName","name","handleCitySelected","city","handleSignIn","className","children","style","paddingBottom","type","value","onChange","e","placeholder","required","marginBottom","onClick","onCitySelected","accept","src","alt","width","height","disabled","marginTop"],"sources":["C:/Apps/swine-fever-website-testing/swine-fever-website-testing/src/components/Sidebar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport CitySearch from './CitySearch.js';\r\n\r\n/**\r\n * Sidebar component for displaying statistics about reported cases.\r\n * It fetches and displays the count of positive and negative cases from the backend.\r\n */\r\nconst Sidebar = ({ setCurrentView }) => {\r\n  const navigate = useNavigate(); // Use the navigate hook for routing\r\n  const [positiveCount, setPositiveCount] = useState(0);\r\n  const [negativeCount, setNegativeCount] = useState(0);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [imagePreview, setImagePreview] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [probability, setProbability] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [selectedCity, setSelectedCity] = useState(null);\r\n  const [user, setUser] = useState(false);\r\n  const [username, setUsername] = useState(null);\r\n  const [organization, setOrganization] = useState(null);\r\n  const [usernameInput, setUsernameInput] = useState('');\r\n  const [organizationInput, setOrganizationInput] = useState('');\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedFile(file);\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setImagePreview(reader.result);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handlePredict = async () => {\r\n    const formData = new FormData();\r\n\r\n    if (!selectedFile) {\r\n      alert(\"Please select an image first.\");\r\n      return;\r\n    }\r\n    else{\r\n      formData.append('image', selectedFile); // 'image' should match the key used in multer\r\n    }\r\n\r\n    if (!user) {\r\n      alert('Please sign in before submitting.');\r\n      return;\r\n    }\r\n    else{\r\n      formData.append('user', username);\r\n      formData.append('org', organization);\r\n    }\r\n\r\n    \r\n\r\n    // Include the latitude and longitude from your selected location\r\n    if (selectedCity) {\r\n      formData.append('lat', selectedCity.lat);\r\n      formData.append('lng', selectedCity.lng);\r\n      \r\n  } else {\r\n      alert(\"Please select a city first.\");\r\n      return;\r\n  }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:3000/predict', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Error in prediction request');\r\n      }\r\n\r\n      const result = await response.json();\r\n      const prediction = result.tagName;\r\n      const probability = result.probability;\r\n      setPrediction(prediction); // Update state with the prediction result\r\n      setProbability(probability)\r\n      console.log(\"Prediction Result:\", result); // Log the prediction result for debugging\r\n    } catch (err) {\r\n      setError(err.message); // Handle errors\r\n      console.error('Prediction Error:', err);\r\n    } finally {\r\n      setLoading(false); // Reset loading state\r\n    }\r\n  };\r\n\r\n  const removePreview = () => {\r\n    setImagePreview(null);\r\n    setSelectedFile(null);\r\n  };\r\n\r\n  /**\r\n   * Function to fetch the counts of positive and negative cases from the API.\r\n   * It updates the state with the fetched counts.\r\n   */\r\n  const fetchCounts = async () => {\r\n    try {\r\n      // Fetch the count of positive cases\r\n      const positiveResponse = await fetch('http://localhost:3000/api/positive-count');\r\n      const positiveData = await positiveResponse.json(); // Parse the JSON response\r\n      setPositiveCount(positiveData.positiveCount); // Update the state with the positive count\r\n  \r\n      // Fetch the count of negative cases\r\n      const negativeResponse = await fetch('http://localhost:3000/api/negative-count');\r\n      if (!negativeResponse.ok) { // Check if the response is not OK\r\n        const errorText = await negativeResponse.text();\r\n        throw new Error(`Failed to fetch negative cases count: ${errorText}`);\r\n      }\r\n      const negativeData = await negativeResponse.json(); // Parse the JSON response\r\n      setNegativeCount(negativeData.negativeCount); // Update the state with the negative count\r\n    } catch (error) {\r\n      console.error('Error fetching counts:', error);\r\n    }\r\n  };\r\n\r\n  const handleCitySearch = async (cityName) => {\r\n    try {      \r\n      if (cityName) {\r\n        setSelectedCity({\r\n          name: cityName.name,\r\n          lat: cityName.lat,\r\n          lng: cityName.lng,\r\n        });\r\n\r\n      } else {\r\n        throw new Error(\"City not found\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching location data:\", err);\r\n      setError(\"Could not find location. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleCitySelected = (city) => {\r\n    handleCitySearch(city); // Fetch location when a city is selected\r\n  };\r\n\r\n  const handleSignIn = async () => {\r\n    setUsername(usernameInput);\r\n    setOrganization(organizationInput);\r\n  \r\n    const formData = new FormData();\r\n    formData.append('username', usernameInput);\r\n  \r\n    try {\r\n      // Send a request to check if the username exists\r\n      const response = await fetch('http://localhost:3000/api/check-username', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n  \r\n      // Now handle the response data correctly\r\n      if (usernameInput === '' || organizationInput === '') {\r\n        setError('Please fill in your Username/Organization');\r\n      } else {\r\n        // Username is available, proceed to set values\r\n        setUsername(usernameInput);\r\n        setOrganization(organizationInput);\r\n  \r\n        // Clear input fields after successful sign-in\r\n        setUsernameInput('');\r\n        setOrganizationInput('');\r\n        setUser(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error checking username:', error);\r\n      setError('An error occurred while checking the username.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n\r\n  // useEffect hook to fetch counts when the component mounts\r\n  useEffect(() => {\r\n    fetchCounts(); // Call fetchCounts to get the initial counts\r\n  }, []); // Empty dependency array ensures this runs only on mount\r\n\r\n  return (\r\n    <div className=\"sidebar\"> {/* Sidebar container */}\r\n    <div style={{paddingBottom: '15px'}} className=\"sign-in\">\r\n        <p>Username: {username}</p>\r\n        {/* Input field for username */}\r\n        <input \r\n          type=\"text\" \r\n          value={usernameInput} \r\n          onChange={(e) => setUsernameInput(e.target.value)}\r\n          placeholder=\"Enter your username\"\r\n          required\r\n        />\r\n        <p>Organization: {organization}</p>\r\n        {/* Input field for organization */}\r\n        <input \r\n          type=\"text\" \r\n          value={organizationInput} \r\n          onChange={(e) => setOrganizationInput(e.target.value)}\r\n          placeholder=\"Enter your organization\"\r\n          required\r\n        />\r\n      </div> \r\n      <button style={{marginBottom: '45px'}} className=\"button\" onClick={handleSignIn}>Sign In</button>\r\n\r\n      <button style={{marginBottom: '-5px'}} className=\"button\" onClick={fetchCounts}>Refresh Statistics</button>\r\n      <div>\r\n        <h3>Number of Reported Positive Cases: {positiveCount}</h3>\r\n        <h3>Number of Reported Negative Cases: {negativeCount}</h3>\r\n      </div>\r\n      {/* CitySearch Component */}\r\n      <CitySearch onCitySelected={handleCitySelected} />\r\n\r\n      {/* File input for image selection */}\r\n      <input\r\n        className=\"file-input\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={handleFileChange}\r\n      />\r\n      {/* Preview of the selected image */}\r\n      {imagePreview && (\r\n        <div className=\"image-preview\">\r\n          <img src={imagePreview} alt=\"Selected\" style={{ width: 'auto', height: '300px' }} />\r\n        </div>\r\n      )}\r\n      {/* Submit for Analysis Button */}\r\n      <button className=\"button\" onClick={handlePredict} disabled={loading && user}>\r\n        {loading ? 'Loading...' : 'Submit for Analysis'}\r\n      </button>\r\n      {prediction && (\r\n        <div style={{paddingBottom: '15px'}} className=\"prediction-result\">\r\n          <h3>Prediction Result:</h3>\r\n          <p>Result: {prediction}</p> {/* Display prediction result */}\r\n          <p>Probability: {probability}</p>\r\n        </div>\r\n      )}\r\n      <button className=\"button\" onClick={removePreview}>\r\n        Cancel\r\n      </button>\r\n      {/* Button to navigate to the gallery */}\r\n      <button style={{ marginTop: '45px'}} className=\"button\" onClick={() => navigate('/gallery')}>\r\n        View Image Gallery \r\n      </button>\r\n      <button className=\"button\" onClick={() => navigate('/')}>\r\n        Back to Home\r\n      </button>\r\n      {error && <p className=\"error-message\">{error}</p>} {/* Display error message */}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}