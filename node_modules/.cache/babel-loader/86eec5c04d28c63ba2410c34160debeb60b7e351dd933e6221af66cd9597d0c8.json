{"ast":null,"code":"var _jsxFileName = \"C:\\\\Apps\\\\swine-fever-website-testing\\\\swine-fever-website-testing\\\\src\\\\components\\\\CitySearch.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CitySearch = ({\n  onCitySelected\n}) => {\n  _s();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    const loadAutocomplete = () => {\n      if (!window.google) return; // Ensure Google API is loaded\n\n      // Initialize the Autocomplete object with options\n      const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\n        types: ['(cities)'],\n        // Restrict search to cities\n        fields: ['geometry', 'name'] // Only request name and geometry\n      });\n\n      // Handle the city selection event\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry) {\n          const cityData = {\n            name: place.name,\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng()\n          };\n          onCitySelected(cityData); // Pass selected city data to parent\n        }\n      });\n    };\n    if (window.google) {\n      loadAutocomplete();\n    } else {\n      window.initAutocomplete = loadAutocomplete; // Setup a global function to be called when the API loads\n    }\n  }, [onCitySelected]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      placeholder: \"Enter a city\",\n      style: {\n        width: '90%',\n        padding: '10px',\n        marginTop: '45px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CitySearch, \"cBQ6FQ+sf5H+lvNONLKqtm4aeQ8=\");\n_c = CitySearch;\nexport default CitySearch;\nvar _c;\n$RefreshReg$(_c, \"CitySearch\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","CitySearch","onCitySelected","_s","inputRef","loadAutocomplete","window","google","autocomplete","maps","places","Autocomplete","current","types","fields","addListener","place","getPlace","geometry","cityData","name","lat","location","lng","initAutocomplete","children","type","ref","placeholder","style","width","padding","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Apps/swine-fever-website-testing/swine-fever-website-testing/src/components/CitySearch.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst CitySearch = ({ onCitySelected }) => {\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const loadAutocomplete = () => {\r\n      if (!window.google) return; // Ensure Google API is loaded\r\n\r\n      // Initialize the Autocomplete object with options\r\n      const autocomplete = new window.google.maps.places.Autocomplete(inputRef.current, {\r\n        types: ['(cities)'], // Restrict search to cities\r\n        fields: ['geometry', 'name'], // Only request name and geometry\r\n      });\r\n\r\n      // Handle the city selection event\r\n      autocomplete.addListener('place_changed', () => {\r\n        const place = autocomplete.getPlace();\r\n        if (place.geometry) {\r\n          const cityData = {\r\n            name: place.name,\r\n            lat: place.geometry.location.lat(),\r\n            lng: place.geometry.location.lng(),\r\n          };\r\n          onCitySelected(cityData); // Pass selected city data to parent\r\n        }\r\n      });\r\n    };\r\n\r\n    if (window.google) {\r\n      loadAutocomplete();\r\n    } else {\r\n      window.initAutocomplete = loadAutocomplete; // Setup a global function to be called when the API loads\r\n    }\r\n  }, [onCitySelected]);\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        ref={inputRef}\r\n        placeholder=\"Enter a city\"\r\n        style={{ width: '90%', padding: '10px', marginTop: '45px' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CitySearch;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAMC,QAAQ,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE7BD,SAAS,CAAC,MAAM;IACd,MAAMQ,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE,OAAO,CAAC;;MAE5B;MACA,MAAMC,YAAY,GAAG,IAAIF,MAAM,CAACC,MAAM,CAACE,IAAI,CAACC,MAAM,CAACC,YAAY,CAACP,QAAQ,CAACQ,OAAO,EAAE;QAChFC,KAAK,EAAE,CAAC,UAAU,CAAC;QAAE;QACrBC,MAAM,EAAE,CAAC,UAAU,EAAE,MAAM,CAAC,CAAE;MAChC,CAAC,CAAC;;MAEF;MACAN,YAAY,CAACO,WAAW,CAAC,eAAe,EAAE,MAAM;QAC9C,MAAMC,KAAK,GAAGR,YAAY,CAACS,QAAQ,CAAC,CAAC;QACrC,IAAID,KAAK,CAACE,QAAQ,EAAE;UAClB,MAAMC,QAAQ,GAAG;YACfC,IAAI,EAAEJ,KAAK,CAACI,IAAI;YAChBC,GAAG,EAAEL,KAAK,CAACE,QAAQ,CAACI,QAAQ,CAACD,GAAG,CAAC,CAAC;YAClCE,GAAG,EAAEP,KAAK,CAACE,QAAQ,CAACI,QAAQ,CAACC,GAAG,CAAC;UACnC,CAAC;UACDrB,cAAc,CAACiB,QAAQ,CAAC,CAAC,CAAC;QAC5B;MACF,CAAC,CAAC;IACJ,CAAC;IAED,IAAIb,MAAM,CAACC,MAAM,EAAE;MACjBF,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACLC,MAAM,CAACkB,gBAAgB,GAAGnB,gBAAgB,CAAC,CAAC;IAC9C;EACF,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC;EAEpB,oBACEF,OAAA;IAAAyB,QAAA,eACEzB,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXC,GAAG,EAAEvB,QAAS;MACdwB,WAAW,EAAC,cAAc;MAC1BC,KAAK,EAAE;QAAEC,KAAK,EAAE,KAAK;QAAEC,OAAO,EAAE,MAAM;QAAEC,SAAS,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CA5CIF,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}